/*
http://www.cgsoso.com/forum-211-1.html

CG搜搜 Unity3d 每日Unity3d插件免费更新 更有VIP资源！

CGSOSO 主打游戏开发，影视设计等CG资源素材。

插件由会员免费分享，如果商用，请务必联系原著购买授权！

daily assets update for try.

U should buy a license from author if u use it in your project!
*/

using UnityEngine;
using System.Collections;
using UnityEngine.UI;
public class InvulnerabilityManager : MonoBehaviour {
    public static InvulnerabilityManager instance;
    public DestructionMechanic left, right;
    float InvulnerabilityTime = 3;
    float SecondsToTriggerInvulnerability;
    float invulnerabilityTrigger;
    public Transform powerBar;
    public float maxPowerBarSize = 24;
    float normalTimescale = 1;
    float invulnTimescale = 2;
    
    public bool EyesInvulnerable;
    void Start()
    {
        Vector3 powerBarscale = powerBar.localScale;
        powerBarscale.x = 0;
        powerBar.localScale = powerBarscale;
        InvulnerabilityTime = InvulnerabilityTime * invulnTimescale;
    }

    void Awake() {
        SecondsToTriggerInvulnerability = InvulnerabilityTime;
        instance = this;
    }

    void Update() {
        if (StateManager.instance.playState != StateManager.PlayState.ingame)
        {
            invulnerabilityTrigger = 0;
            //Time.timeScale = normalTimescale;
            return; }


        if (left.isInvulnerable && right.isInvulnerable)
        {
            EyesInvulnerable = true;
            Time.timeScale = invulnTimescale;
        }
        else {
            EyesInvulnerable = false;
            Time.timeScale = normalTimescale;

        }

        if (EyesInvulnerable == false)
        {
            if (!ClickControl.instance.isLeftScreenTouched() && !ClickControl.instance.isRightScreenTouched())
            {
                invulnerabilityTrigger += Time.deltaTime;
                if (invulnerabilityTrigger >= SecondsToTriggerInvulnerability) {
                    TriggerInvulnerability();
                }
            }
            else
            {
                invulnerabilityTrigger -= Time.deltaTime;
            }
        }
      

        invulnerabilityTrigger = Mathf.Clamp(invulnerabilityTrigger, 0, SecondsToTriggerInvulnerability);
        Handlers();
    }
    void Handlers()
    {
        float lerpPowerSeconds = 0.7f;
        float fillValue = invulnerabilityTrigger / SecondsToTriggerInvulnerability;
        Vector3 powerBarscale = powerBar.localScale;
        powerBarscale.x = Mathf.MoveTowards(powerBarscale.x, fillValue*maxPowerBarSize, Time.deltaTime/lerpPowerSeconds*maxPowerBarSize);
        powerBar.localScale = powerBarscale;

    }





  
    public void TriggerInvulnerability()
    {
       
        StartCoroutine(invulnRoutine());
    }

    public IEnumerator invulnRoutine()
    {
        left.ActivateInvulnerability(InvulnerabilityTime);
        right.ActivateInvulnerability(InvulnerabilityTime);
        yield return new WaitForSeconds(InvulnerabilityTime);
        invulnerabilityTrigger = 0;

    }

}
